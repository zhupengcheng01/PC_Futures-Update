<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:PC_Futures.ANXINYI">

    <!--行情RadioButton样式-->
    <Style x:Key="PlateRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="#000000" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="btnBorder" Background="#dbdde3" BorderThickness="1" BorderBrush="#535353" CornerRadius="5,0,0,5">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="2"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="White" />
                            <Setter Property="Background" Value="#4f4d4d" TargetName="btnBorder"/>
                            <Setter Property="BorderBrush" Value="#313131" TargetName="btnBorder"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--行情TabItem样式-->
    <Style x:Key="QuotesTabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Border Height="25" Width="80" x:Name="borTabItem" Background="Transparent" BorderThickness="0" SnapsToDevicePixels="True">
                        <Border x:Name="borMinPanel" VerticalAlignment="Center" BorderThickness="0,0,1,0" BorderBrush="#bababa" Margin="0,5">
                            <TextBlock x:Name="contentPresenter" Text="{TemplateBinding Header}" HorizontalAlignment="Center" TextWrapping="NoWrap" Focusable="False" Foreground="#999999" Margin="10,0" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="#518bee" TargetName="contentPresenter" />
                            <Setter Property="Background" TargetName="borTabItem">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="#252931" Offset="0" />
                                        <GradientStop Color="#000000" Offset="0.5" />
                                        <GradientStop Color="#252931" Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--表头交易Button样式-->
    <Style x:Key="MainTradeButton" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#333333" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="btnBorder" BorderThickness="1" BorderBrush="Transparent" CornerRadius="3" Background="Transparent" SnapsToDevicePixels="True">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" Margin="5,2" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="#a9c6f8" TargetName="btnBorder"/>
                            <Setter Property="Background" TargetName="btnBorder">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="#ffffff" Offset="0" />
                                        <GradientStop Color="#d7d7d7" Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--表头最大/最小按钮样式-->
    <Style x:Key="WindowMaxButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" Background="Transparent">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" Margin="2"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#d0d0d0"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--表头最大/最小按钮样式-->
    <Style x:Key="WindowCloseButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" Background="Transparent">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" Margin="2"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">

                            <Setter TargetName="Border" Property="BorderThickness" Value="1"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="#00B7EE"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--菜单栏按钮样式-->
    <Style x:Key="QuoteBlueButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="btnBorder" BorderThickness="1" BorderBrush="Transparent" CornerRadius="3" Background="Transparent" SnapsToDevicePixels="True">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" Margin="2"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="#6ea3fe" TargetName="btnBorder"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" Value="#6ea3fe" TargetName="btnBorder"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--菜单栏按钮样式-->
    <Style x:Key="QuoteButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="btnBorder" BorderThickness="1" BorderBrush="Transparent" CornerRadius="3" Background="Transparent" SnapsToDevicePixels="True">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" Margin="2" x:Name="contentTarget"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#37425d" TargetName="btnBorder"/>
                            <Setter Property="BorderBrush" Value="#5381ce" TargetName="btnBorder"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#37425d" TargetName="btnBorder"/>
                            <Setter Property="BorderBrush" Value="#5381ce" TargetName="btnBorder"/>
                            <Setter Property="Margin" Value="3" TargetName="contentTarget"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--报价RadioButton样式-->
    <Style x:Key="QuoteRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border x:Name="btnBorder" BorderThickness="1" BorderBrush="Transparent" CornerRadius="3" Background="Transparent" SnapsToDevicePixels="True">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" Margin="2"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#37425d" TargetName="btnBorder"/>
                            <Setter Property="BorderBrush" Value="#5381ce" TargetName="btnBorder"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="#37425d" TargetName="btnBorder"/>
                            <Setter Property="BorderBrush" Value="#5381ce" TargetName="btnBorder"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--锁定Button样式-->
    <Style x:Key="LockingButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="btnBorder" BorderThickness="1" BorderBrush="Transparent" CornerRadius="3" Background="Transparent" SnapsToDevicePixels="True">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" Margin="2"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#606376" TargetName="btnBorder"/>
                            <Setter Property="BorderBrush" Value="#434652" TargetName="btnBorder"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#3e4151" TargetName="btnBorder"/>
                            <Setter Property="BorderBrush" Value="#353846" TargetName="btnBorder"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--交易最小化按钮样式-->
    <Style x:Key="MinTradeChkStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border x:Name="btnBorder" BorderThickness="1" BorderBrush="Transparent" CornerRadius="3" Background="Transparent" SnapsToDevicePixels="True">
                        <Image Source="/PC_Futures;component/Resources/Images/jiaoyi_guanbi.png" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="2"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#606376" TargetName="btnBorder"/>
                            <Setter Property="BorderBrush" Value="#434652" TargetName="btnBorder"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#3e4151" TargetName="btnBorder"/>
                            <Setter Property="BorderBrush" Value="#353846" TargetName="btnBorder"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--交易RadioButton样式-->
    <Style x:Key="TradeRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="#4b4b4b" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="btnBorder" Background="Transparent">
                        <StackPanel Orientation="Horizontal" Margin="5,2" Height="22">
                            <Image  x:Name="btnImg" Source="/PC_Futures;component/Resources/Images/jiaoyi_wxz.png" Width="18" Height="18" VerticalAlignment="Center"/>
                            <ContentPresenter  Margin="5,0,0,0" VerticalAlignment="Center"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="#000000" />
                            <Setter Property="Source" Value="/PC_Futures;component/Resources/Images/jiaoyi_xz.png" TargetName="btnImg"/>
                            <Setter Property="Background" TargetName="btnBorder">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="#ffffff" Offset="0" />
                                        <GradientStop Color="#bec1cc" Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--当日委托RadioButton样式-->
    <Style x:Key="OrderRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="#4b4b4b" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="btnBorder" Background="Transparent">
                        <StackPanel Orientation="Horizontal" Margin="5,2" Height="22">
                            <Image x:Name="btnImg" Source="/PC_Futures;component/Resources/Images/weituo_wxz.png" Width="18" Height="18" VerticalAlignment="Center"/>
                            <ContentPresenter  Margin="5,0,0,0" VerticalAlignment="Center"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="#000000" />
                            <Setter Property="Source" Value="/PC_Futures;component/Resources/Images/weituo_xz.png" TargetName="btnImg"/>
                            <Setter Property="Background" TargetName="btnBorder">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="#ffffff" Offset="0" />
                                        <GradientStop Color="#bec1cc" Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--当日成交RadioButton样式-->
    <Style x:Key="DealRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="#4b4b4b" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="btnBorder" Background="Transparent">
                        <StackPanel Orientation="Horizontal" Margin="5,2"  Height="22">
                            <Image x:Name="btnImg" Source="/PC_Futures;component/Resources/Images/chengjiao_wxz.png" Width="18" Height="18" VerticalAlignment="Center"/>
                            <ContentPresenter  Margin="5,0,0,0" VerticalAlignment="Center"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="#000000" />
                            <Setter Property="Source" Value="/PC_Futures;component/Resources/Images/chengjiao_xz.png" TargetName="btnImg"/>
                            <Setter Property="Background" TargetName="btnBorder">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="#ffffff" Offset="0" />
                                        <GradientStop Color="#bec1cc" Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--持仓RadioButton样式-->
    <Style x:Key="PositionRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="#4b4b4b" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="btnBorder" Background="Transparent">
                        <StackPanel Orientation="Horizontal" Margin="5,2"  Height="22">
                            <Image x:Name="btnImg" Source="/PC_Futures;component/Resources/Images/chicang_wxz.png" Width="18" Height="18" VerticalAlignment="Center"/>
                            <ContentPresenter  Margin="5,0,0,0" VerticalAlignment="Center"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="#000000" />
                            <Setter Property="Source" Value="/PC_Futures;component/Resources/Images/chicang_xz.png" TargetName="btnImg"/>
                            <Setter Property="Background" TargetName="btnBorder">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="#ffffff" Offset="0" />
                                        <GradientStop Color="#bec1cc" Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--条件单RadioButton样式-->
    <Style x:Key="ConditionRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="#4b4b4b" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="btnBorder" Background="Transparent">
                        <StackPanel Orientation="Horizontal" Margin="5,2" Height="22">
                            <Image x:Name="btnImg" Source="/PC_Futures;component/Resources/Images/taojiandan_wxz.png" Width="18" Height="18" VerticalAlignment="Center"/>
                            <ContentPresenter  Margin="5,0,0,0" VerticalAlignment="Center"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="#000000" />
                            <Setter Property="Source" Value="/PC_Futures;component/Resources/Images/taojiandan_xz.png" TargetName="btnImg"/>
                            <Setter Property="Background" TargetName="btnBorder">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="#ffffff" Offset="0" />
                                        <GradientStop Color="#bec1cc" Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--查询RadioButton样式-->
    <Style x:Key="QueryRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="#4b4b4b" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="btnBorder" Background="Transparent">
                        <StackPanel Orientation="Horizontal" Margin="5,2" Height="22">
                            <Image x:Name="btnImg" Source="/PC_Futures;component/Resources/Images/chanxun_wxz.png" Width="18" Height="18" VerticalAlignment="Center"/>
                            <ContentPresenter  Margin="5,0,0,0" VerticalAlignment="Center"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="#000000" />
                            <Setter Property="Source" Value="/PC_Futures;component/Resources/Images/chanxun_xz.png" TargetName="btnImg"/>
                            <Setter Property="Background" TargetName="btnBorder">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="#ffffff" Offset="0" />
                                        <GradientStop Color="#bec1cc" Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--参数设置Button样式-->
    <Style x:Key="ParamSetButton" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#4b4b4b" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="btnBorder" Background="Transparent">
                        <StackPanel Orientation="Horizontal" Margin="5,2" Height="22">
                            <Image x:Name="btnImg" Source="/PC_Futures;component/Resources/Images/canshusz_wxz.png" Width="18" Height="18" VerticalAlignment="Center"/>
                            <ContentPresenter  Margin="5,0,0,0" VerticalAlignment="Center"/>
                        </StackPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--银期转账RadioButton样式-->
    <Style x:Key="TransferRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="#4b4b4b" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="btnBorder" Background="Transparent">
                        <StackPanel Orientation="Horizontal" Margin="5,2" Height="22">
                            <Image x:Name="btnImg" Source="/PC_Futures;component/Resources/Images/yinqizhuanz_wxz.png" Width="18" Height="18" VerticalAlignment="Center"/>
                            <ContentPresenter  Margin="5,0,0,0" VerticalAlignment="Center"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="#000000" />
                            <Setter Property="Source" Value="/PC_Futures;component/Resources/Images/yinqizhuanz_xz.png" TargetName="btnImg"/>
                            <Setter Property="Background" TargetName="btnBorder">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="#ffffff" Offset="0" />
                                        <GradientStop Color="#bec1cc" Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    <!--隐藏下单面板按钮样式-->
    <Style x:Key="HideTradeChkStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <GradientStop Color="#cac9ca" Offset="0" />
                    <GradientStop Color="#e7e7e7" Offset="0.5" />
                    <GradientStop Color="#cac9ca" Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border x:Name="btnBorder" Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="#aaaaaa" CornerRadius="3">
                        <Image x:Name="btnImg" Source="/PC_Futures;component/Resources/Images/shouye_left.png" VerticalAlignment="Center" Width="5" Height="8"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="#64a5ec" TargetName="btnBorder"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Source" Value="/PC_Futures;component/Resources/Images/shouye_right.png" TargetName="btnImg"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--期货行情DataGrid-->
    <Style x:Key="QuotesDataGridStyle" TargetType="{x:Type DataGrid}">
        <Setter Property="Background" Value="#000000"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"/>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="SelectionMode" Value="Single" />
        <!--<Setter Property="FontSize" Value="13" />-->
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="GridLinesVisibility" Value="None"></Setter>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <!--<Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>-->
                                        <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="1"/>
                                        <ScrollBar x:Name="PART_VerticalScrollBar" Style="{DynamicResource ScrollBarStyle1}" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                                        <Grid Grid.Column="1" Grid.Row="2">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar x:Name="PART_HorizontalScrollBar" Style="{DynamicResource ScrollBarStyle1}" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ColumnHeaderStyle">
            <Setter.Value>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="#000000"></Setter>
                    <Setter Property="Foreground" Value="#00ffff"></Setter>
                    <Setter Property="HorizontalContentAlignment" Value="Right" />
                    <!--<Setter Property="Height" Value="25"></Setter>-->
                    <!--<Setter Property="FontSize" Value="14" />-->
                    <!--<EventSetter Event="DataGridColumnHeader.MouseLeftButtonDown" Handler="DataGridHeader_MouseLeftButtonDown"/>-->
                    <!--<Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Border BorderThickness="0" BorderBrush="LightGray" Background="{TemplateBinding Background}">
                                    <StackPanel Margin="0,0,5,0" Orientation="Horizontal" HorizontalAlignment="Right">
                                        <ContentPresenter VerticalAlignment="Center" Content="{TemplateBinding DataGridColumnHeader.Content}"></ContentPresenter>
                                        <TextBlock VerticalAlignment="Center"></TextBlock>
                                    </StackPanel>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <Trigger Property="SortDirection" Value="Ascending">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Border BorderThickness="0" BorderBrush="LightGray">
                                            <StackPanel Margin="0,0,5,0" Orientation="Horizontal" HorizontalAlignment="Right">
                                                <ContentPresenter VerticalAlignment="Center" Content="{TemplateBinding DataGridColumnHeader.Content}"></ContentPresenter>
                                                <TextBlock VerticalAlignment="Center">↑</TextBlock>
                                            </StackPanel>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Border BorderThickness="0" BorderBrush="LightGray">
                                            <StackPanel Margin="0,0,5,0" Orientation="Horizontal" HorizontalAlignment="Right">
                                                <ContentPresenter VerticalAlignment="Center" Content="{TemplateBinding DataGridColumnHeader.Content}"></ContentPresenter>
                                                <TextBlock VerticalAlignment="Center">↓</TextBlock>
                                            </StackPanel>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </Style.Triggers>-->
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="DataGridCell">
                    <Setter Property="BorderThickness" Value="0"/>
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="Transparent"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    

    <!--ScrollBar 控件样式-->
    <Style x:Key="ScrollBarStyle1" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Style.Triggers>
            <!--横向滚动条-->
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="18" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid >
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="18"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition MaxWidth="18"/>
                                </Grid.ColumnDefinitions>
                                <!--在这设置横向ScrollBar背景色-->
                                <Border Grid.ColumnSpan="3" CornerRadius="2"  Background="Black" />
                                <RepeatButton  Grid.Column="0"  Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" />
                                <Track  Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton  Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb  Style="{StaticResource ScrollBarThumbHorizontal}"  Margin="0,1,0,1"  />
                                    </Track.Thumb>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton  Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
                                    </Track.IncreaseRepeatButton>
                                </Track>
                                <RepeatButton  Grid.Column="3"   Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <!--竖向滚动条-->
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="18"/>
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid >
                                <Grid.RowDefinitions>
                                    <RowDefinition MaxHeight="18"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition MaxHeight="18"/>
                                </Grid.RowDefinitions>
                                <!--在这设置竖向ScrollBar背景色-->
                                <Border  Grid.RowSpan="3" CornerRadius="2"  Background="Black" />
                                <RepeatButton  Grid.Row="0" Style="{StaticResource ScrollBarLineButton}"  Height="18"  Command="ScrollBar.LineUpCommand"  Content="M 0 4 L 8 4 L 4 0 Z" />
                                <Track  Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton  Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb  Style="{StaticResource ScrollBarThumbVertical}"  Margin="1,0,1,0"  />
                                    </Track.Thumb>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton  Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
                                    </Track.IncreaseRepeatButton>
                                </Track>
                                <RepeatButton  Grid.Row="3"  Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--滚动条两边按钮模版-->
    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <!--按钮背景和边框颜色,设置Border的边框和背景-->
                    <Border   Name="Border" Margin="1"   CornerRadius="2"  Background="#3D3D3D" BorderBrush="#3D3D3D" BorderThickness="0">
                        <!--两边按钮中的箭头-->
                        <Path  HorizontalAlignment="Center" VerticalAlignment="Center" Fill="White" Data="{Binding Path=Content,RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--按下时背景颜色-->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#10FFFFFF" />
                        </Trigger>
                        <!--控件禁用背景色-->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#212121"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--中间翻页模板-->
    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--横向中间按钮-->
    <Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <!--在Border设置中间按钮背景色和边框颜色-->
                    <Border CornerRadius="2"   Background="#828385">
                        <!--在中间添加竖条-->
                        <Grid>
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Stretch" Height="Auto" HorizontalAlignment="Center">
                                <Rectangle Width="1" Stroke="Black" Fill="Transparent" Margin="0.5,3,0.5,3"/>
                                <Rectangle Width="1" Stroke="Black" Fill="Transparent" Margin="0.5,3,0.5,3"/>
                                <Rectangle Width="1" Stroke="Black" Fill="Transparent" Margin="0.5,3,0.5,3"/>
                            </StackPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--竖向中间按钮-->
    <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <!--在Border设置中间按钮背景色和边框颜色-->
                    <Border CornerRadius="2"   Background="#828385">
                        <!--在中间添加横条-->
                        <Grid>
                            <StackPanel Orientation="Vertical" VerticalAlignment="Center" Height="Auto"  HorizontalAlignment="Stretch">
                                <Rectangle Height="1" Stroke="#505050" Fill="Transparent" Margin="3,0.5,3,0.5"/>
                                <Rectangle Height="1" Stroke="#505050" Fill="Transparent" Margin="3,0.5,3,0.5"/>
                                <Rectangle Height="1" Stroke="#505050" Fill="Transparent"  Margin="3,0.5,3,0.5"/>
                            </StackPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderStyleMain"
           TargetType="{x:Type Expander}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="VerticalContentAlignment"
                Value="Stretch" />
        <Setter Property="BorderBrush"
                Value="Transparent" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="STHide">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                           Storyboard.TargetName="ExpandSite">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2"
                                                      Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                           Storyboard.TargetName="ExpandSite">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2"
                                                      Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="STShow">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                           Storyboard.TargetName="ExpandSite">
                                <EasingDoubleKeyFrame KeyTime="0"
                                                      Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2"
                                                      Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                           Storyboard.TargetName="ExpandSite">
                                <EasingDoubleKeyFrame KeyTime="0"
                                                      Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2"
                                                      Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="3"
                            SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite"
                                          ContentTemplate="{TemplateBinding HeaderTemplate}"
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                          Content="{TemplateBinding Header}"
                                          DockPanel.Dock="Top"
                                          Foreground="{TemplateBinding Foreground}"
                                          FontWeight="{TemplateBinding FontWeight}"
                                        
                                          FontStyle="{TemplateBinding FontStyle}"
                                          FontStretch="{TemplateBinding FontStretch}"
                                          FontSize="{TemplateBinding FontSize}"
                                          FontFamily="{TemplateBinding FontFamily}"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          Margin="1"
                                          MinWidth="0"
                                          MinHeight="0"
                                          Padding="{TemplateBinding Padding}"
                                        
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <ContentPresenter x:Name="ExpandSite"
                                              DockPanel.Dock="Bottom"
                                              Focusable="false"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"
                                              Visibility="Visible"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ContentPresenter.LayoutTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </ContentPresenter.LayoutTransform>
                            </ContentPresenter>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                            <BeginStoryboard Storyboard="{StaticResource STShow}" />
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Expander.Expanded">
                            <BeginStoryboard x:Name="STShow_BeginStoryboard"
                                             Storyboard="{StaticResource STShow}" />
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Expander.Collapsed">
                            <BeginStoryboard Storyboard="{StaticResource STHide}" />
                        </EventTrigger>
                        <Trigger Property="ExpandDirection"
                                 Value="Right">
                            <Setter Property="DockPanel.Dock"
                                    TargetName="ExpandSite"
                                    Value="Right" />
                            <Setter Property="DockPanel.Dock"
                                    TargetName="HeaderSite"
                                    Value="Left" />
                         
                        </Trigger>
                        <Trigger Property="ExpandDirection"
                                 Value="Up">
                            <Setter Property="DockPanel.Dock"
                                    TargetName="ExpandSite"
                                    Value="Top" />
                            <Setter Property="DockPanel.Dock"
                                    TargetName="HeaderSite"
                                    Value="Bottom" />
                          
                        </Trigger>
                        <Trigger Property="ExpandDirection"
                                 Value="Left">
                            <Setter Property="DockPanel.Dock"
                                    TargetName="ExpandSite"
                                    Value="Left" />
                            <Setter Property="DockPanel.Dock"
                                    TargetName="HeaderSite"
                                    Value="Right" />
                       
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>